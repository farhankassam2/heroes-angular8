{
  "root": true,
  "ignorePatterns": [
    "projects/**/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "project": [
          "tsconfig.json",
          "tsconfig.spec.json"
        ],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates",
        "plugin:jsdoc/recommended"
      ],
      "rules": {
        // To disable any particular rule, the following can be written as a comment on the line to disable: // eslint-disable-line no-undef-init
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "app",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "app",
            "style": "kebab-case"
          }
        ],
        "indent": [
          "error",
          4
        ],
        "prefer-const": "error",
        "curly": [
          "error"
        ],
        "object-curly-spacing": [
          "error",
          "always"
        ],
        "array-bracket-spacing": [
          "error",
          "never"
          // {
          //   "objectInArrays": true,
          //   "arraysInArrays": true
          // }
        ],
        "keyword-spacing": "error",
        "key-spacing": [
          "error",
          {
            "align": "colon"
          }
        ],
        "spaced-comment": [
          "error",
          "always",
          {
            "markers": [
              "/"
            ]
          }
        ],
        "no-var": "warn",
        "no-unsafe-optional-chaining": "error",
        "no-unsafe-finally": "error",
        "no-undef-init": "error",
        "no-unsafe-negation": [
          "error",
          {
            "enforceForOrderingRelations": true
          }
        ],
        "no-duplicate-case": "error",
        "no-duplicate-imports": "warn",
        "no-dupe-keys": "error",
        "no-empty": [
          "error",
          {
            "allowEmptyCatch": true
          }
        ],
        "no-unneeded-ternary": "error",
        "no-invalid-this": [
          "error",
          {
            "capIsConstructor": false
          }
        ],
        "no-unused-vars": [
          "warn",
          {
            "vars": "local"
          }
        ],
        "prefer-object-spread": "error",
        "prefer-template": "error",
        "no-this-before-super": "error",
        "no-extra-bind": "error",
        "no-use-before-define": "warn",
        // https://eslint.org/docs/rules/no-use-before-define: Best to always declare variables, functions and classes, before using them. In ES6, block-level bindings (let and const) introduce a "temporal dead zone" where a ReferenceError will be thrown with any attempt to access the variable before its declaration.
        "no-useless-return": "error",
        "no-useless-rename": "error",
        "no-useless-escape": "error",
        "no-lonely-if": "warn",
        "use-isnan": "error",
        "arrow-parens": [
          "error",
          "as-needed",
          {
            "requireForBlockBody": true
          }
        ],
        "arrow-spacing": "error",
        "implicit-arrow-linebreak": [
          "error",
          "beside"
        ],
        "no-dupe-else-if": "warn",
        "no-dupe-args": "error",
        "no-confusing-arrow": "error",
        "no-constant-condition": "error",
        "quote-props": [
          "error",
          "as-needed",
          {
            "keywords": true,
            "numbers": true // https://eslint.org/docs/rules/quote-props: 1e2 and 100 are coerced into strings before getting used as the property name. Both String(1e2) and String(100) happen to be equal to "100", which causes the "Duplicate data property in object literal not allowed in strict mode" error. Issues like that can be tricky to debug, so some prefer to require quotes around object keys that are numbers
          }
        ],
        "quotes": [
          "error",
          "double",
          {
            "avoidEscape": true
          }
        ],
        "no-inline-comments": "warn",
        "multiline-comment-style": [
          "warn",
          "starred-block"
        ],
        "default-case-last": "error",
        "camelcase": "error",
        "no-fallthrough": "error",
        "func-names": [
          "error",
          "as-needed"
        ],
        "object-shorthand": [
          "warn"
        ],
        "no-self-compare": "error",
        "wrap-regex": "error",
        "sort-imports": "warn",
        "no-else-return": "warn",
        "max-len": [
          "error",
          {
            "code": 120,
            "ignoreStrings": true
          }
        ],
        "new-parens": "error",
        "no-multiple-empty-lines": [
          "error",
          {
            "max": 2
          }
        ],
        "no-trailing-spaces": "error",
        "no-irregular-whitespace": [
          "error",
          {
            "skipStrings": true,
            "skipRegExps": true,
            "skipTemplates": true
          }
        ],
        "block-spacing": [
          "error",
          "always"
        ],
        "block-scoped-var": "error",
        "no-whitespace-before-property": "error",
        "space-before-function-paren": [
          "warn",
          "never"
        ],
        "space-in-parens": [
          "error",
          "never"
        ],
        "func-call-spacing": [
          "error",
          "never"
        ],
        "comma-spacing": [
          "error",
          {
            "before": false,
            "after": true
          }
        ],
        "template-curly-spacing": [
          "error",
          "never"
        ]
      }
    },
    {
      "files": [
        "*.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "rules": {}
    }
  ]
}